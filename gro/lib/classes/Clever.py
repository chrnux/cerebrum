import time
from Cerebrum.extlib import sets

class Lazy(object):
    pass

# å bruke en klasse med __call__ vil ikke funke, da den ikke vil bli bundet til objektet.
# mulig det kan jukses til med noen stygge metaklassetriks, men dette blir penere.

def LazyMethod(var, load):
    assert type(var) == str
    assert type(load) == str

    def lazy(self):
        value = getattr(self, var)
        if value is Lazy:
            loadmethod = getattr(self, load)
            loadmethod()
            value = getattr(self, var)
            if value is Lazy:
                raise Exception('%s was not initialized during load' % var)
        return value
    return lazy

def SetWrapper(var):
    assert type(var) == str

    def set(self, value):
        # make sure the variable has been loaded
        getattr(self, var)
        # set the variable
        setattr(self, '_' + var, value)
        self.updated.add(var)
    return set

class CleverProperty(property):
    def __init__(self, var):
        property.__init__(self, doc = 'autogenerated for %s' % var)

        self.fgetName = 'get' + var[0].upper() + var[1:]
        self.fsetName = 'set' + var[0].upper() + var[1:]
        self.var = var

    def __get__(self, obj, cls):
        return getattr(obj, self.fgetName)()

    def __set__(self, obj, value):
        getattr(obj, self.fsetName)(value)

class Clever(object):
    def __init__(self, cls, *args, **vargs):
        mark = '_%s%s' % (cls.__name__, id(self))
        # check if the object is old
        if hasattr(self, mark):
            return getattr(self, mark)

        # set all variables give in args and vargs
        for var, value in zip(cls.slots, args) + vargs.items():
            setattr(self, '_' + var, value)

        # make sure all variables are set
        for var in cls.slots:
            var = '_' + var
            hasattr(self, var) or setattr(self, var, Lazy)

        # used by CleverProperty to track changes
        if not hasattr(self, 'updated'):
            self.updated = sets.Set()

        # mark the object as old
        setattr(self, mark, time.time())

    def prepare(cls, defaultLoad=None):
        for var in cls.slots:
            get = 'get' + var[0].upper() + var[1:]
            set = 'set' + var[0].upper() + var[1:]

            if not hasattr(cls, get):
                if not defaultLoad:
                    raise Exception('check your code, defaultload wasnt given')
                setattr(cls, get, LazyMethod('_' + var, defaultLoad))

            if not hasattr(cls, set):
                if var in cls.writeSlots:
                    setattr(cls, set, SetWrapper(var))

            if not hasattr(cls, var):
                setattr(cls, var, CleverProperty(var))

    prepare = staticmethod(prepare)
