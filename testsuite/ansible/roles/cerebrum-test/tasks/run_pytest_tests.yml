# Set up and run tests
#
# Will run tests from the file `pytest_tests.txt' either in `files/<config>/' or
# `files/'.
#
# The file should contain one test file or test folder per line, relative to
# `<crb_src_dir>/testsuite/tests/'.
# 
# Required vars:
#  - virtualenv
#      Where our virtualenv is. `nosetests' should be installed in the
#      virtualenv.
#  - crb_src_dir
#      The source directory for Cerebrum.
#  - crb_tests  TODO: Not currently in use, should we accept tests from this
#                     variable as well?
#      The test folders/files to run, relative to {{ crb_src_dir }}/testsuite/tests

- name: build test dir
  file:
    path: "{{ virtualenv }}/_test"
    state: directory
  register: _test_dir

- debug: msg=

- name: link tests
  file:
    src: "{{ crb_src_dir }}/testsuite/tests"
    path: "tests"
    state: link

- name: place pytest config
  template:
      src: "{{ item }}"
      # dest: "{{ crb_src_dir }}/testsuite/tests/{{ config }}_pytestconfig.ini"
      dest: "{{ _test_dir.path }}/pytest.ini"
  with_first_found:
    - files:
        - 'pytestconfig.j2'
      paths:
        - templates/{{ config }}
        - templates/
  register: _pytestconfig

# Pytest requires that the config file is in the same path hierarchy as the
# testfiles, in order to determine its own .cache dir to use under the test
# session. The config file must also be inserted as both the pytest-config
# and the pytest-cov config, since the pytest-cov module doesn't
# automatically read the main pytest-config when it is manually defined.
- name: Run test
  command: '{{ virtualenv }}/bin/py.test
                  -c {{ _pytestconfig | dest }}
                  --cov-config {{ _pytestconfig | dest }}
                  {{ lookup("file", item) | split | prefix("tests/") | join( " " ) }}'
  args:
    chdir: "{{ virtualenv }}/_test"
  with_first_found:
    - files:
        - 'pytest_tests.txt'
      paths:
        - files/{{ config }}
        - files/
  register: _test_result
  ignore_errors: yes

# This will help when figuring out what goes wrong -- pure dumps of
# stdout/stderr from nosetests
- name: write test output stdout
  copy:
      content: "{{ _test_result | stdout }}"
      dest: "/tmp/test_{{ config | default('default') }}_result.stdout"
  delegate_to: 127.0.0.1

- name: write test output stderr
  copy:
      content: "{{ _test_result | stderr }}"
      dest: "/tmp/test_{{ config | default('default') }}_result.stderr"
  delegate_to: 127.0.0.1

# Cause playbook to fail, if test has failed.
- name: Foul play
  when: _test_result | rc_or != 0
  debug: msg="Pytests rc != 0, tests failed. Check output files for errors."
  failed_when: true
