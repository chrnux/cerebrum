#
# Configuration file for Cerebrum, bofh.sh and bofhd.sh.
# The idea is to keep all the configuration in one place.
#
# For Cerebrum/USIT.
#
# Save this file as ~/.cerebrumrc.
#
# A file like ~/.cereconf/uio/cerepath.py will override
# the common configuration.
#
# Changelog:
#   June   2013, Alexander RÃ¸dseth <rodseth@usit.uio.no>
#   July   2013
#   August 2013
#

CEREBRUM_PATH=~/checkout/cerebrum
CERECONF_PATH=~/.cerebrum

# Clear the generated configuration every time
AUTOGEN_MARKER_FILE='WARNING: AUTOGENERATED'
if [[ -f "$CERECONF_PATH/$AUTOGEN_MARKER_FILE" ]]; then
  rm -rf "$CERECONF_PATH"'/*'
fi

# If INST is set, use that as CEREBRUM_INST (overrides CEREBRUM_INST)
[ -z "$INST" ] || CEREBRUM_INST="$INST"

# If CI is set, use that as CEREBRUM_INST (overrides INST and CEREBRUM_INST)
[ -z "$CI" ] || CEREBRUM_INST="$CI"

# Set CEREBRUM_INST to uio if it's not already set
[ -z "$CEREBRUM_INST" ] && CEREBRUM_INST=uio

# exports
export CEREBRUM_PATH
export CEREBRUM_INST

# UIO
CEREBRUM_DATABASE_USER_uio=cerebrum
CEREBRUM_DATABASE_HOST_uio=dbpg-cere-utv.uio.no
CEREBRUM_DATABASE_NAME_uio="cerebrum_uio_$USER"
CEREBRUM_DATABASE_TABLE_OWNER_uio=cerebrum

# TSD
CEREBRUM_DATABASE_USER_tsd=cerebrum
CEREBRUM_DATABASE_HOST_tsd=dbpg-cere-utv.uio.no
CEREBRUM_DATABASE_NAME_tsd="cerebrum_uio_$USER"
CEREBRUM_DATABASE_TABLE_OWNER_tsd=cerebrum

# UIA
CEREBRUM_DATABASE_USER_uia=cerebrum
CEREBRUM_DATABASE_HOST_uia=dbpg-cere-utv.uio.no
CEREBRUM_DATABASE_NAME_uia="cerebrum_uia_$USER"
CEREBRUM_DATABASE_TABLE_OWNER_uia=cerebrum

# For cereconf.py
export CERECONF_GLOBAL="/cerebrum/$CEREBRUM_INST/etc/cerebrum"
eval export CEREBRUM_DATABASE_USER=\$CEREBRUM_DATABASE_USER_$CEREBRUM_INST
eval export CEREBRUM_DATABASE_HOST=\$CEREBRUM_DATABASE_HOST_$CEREBRUM_INST
eval export CEREBRUM_DATABASE_NAME=\$CEREBRUM_DATABASE_NAME_$CEREBRUM_INST
eval export CEREBRUM_DATABASE_TABLE_OWNER=\$CEREBRUM_DATABASE_TABLE_OWNER_$CEREBRUM_INST

# CEREBRUM
# Don't set this to your home directory, preferrably get a dedicated directory
# on cere-utv01 just to store the logs.
export LOGGING_CONFIGFILE="$CERECONF_PATH/logging.ini"
export LOGGING_ROOT_DIR=/tmp

# PYTHON
if [[ "$PY" == "26" ]]; then
  # Use Python 2.6 if PY=26
  PYTHON_BIN=/usr/bin/python2.6
  PYTHON_LIBRARY_PATH=/local/lib
  PYTHON_EXTERNAL=$CEREBRUM_PATH/scripts/jointconfig/external/python2.6
  export LD_LIBRARY_PATH=$PYTHON_LIBRARY_PATH:$LD_LIBRARY_PATH
else
  # Use Python 2.5 by default
  PYTHON_BIN=/local/bin/python
fi

# Check if the Python interpreter can be found
if [[ ! -e "$PYTHON_BIN" ]]; then
  echo -e "\e[97mCould not find: \e[91m$PYTHON_BIN\e[0m"
  exit 1
fi
PYTHON_VERSION=`$PYTHON_BIN --version 2>&1 | cut -d' ' -f2`
SHORT_PYTHON_VERSION="${PYTHON_VERSION%.*}"
SHORTER_PYTHON_VERSION="${SHORT_PYTHON_VERSION/./}"

# Check if /cerebrum exists
if [[ ! -d /cerebrum ]]; then
  echo -e "\e[97mNo such directory: \e[91m/cerebrum\e[0m"
  exit 1
fi

# Check if $CEREBRUM_PATH/../cerebrum_sites exists
if [[ ! -d "$CEREBRUM_PATH/../cerebrum_sites" ]]; then
  echo -e "\e[97mCould not find: \e[91m$CEREBRUM_PATH/../cerebrum_sites\e[0m"
  exit 1
fi

# PYTHONPATH
CERECONF_COMMON=$CERECONF_PATH/common
PYTHON_SITE_PACKAGES=/site/lib/python2.5/site-packages
PYTHON_CEREBRUM_MODULES="$CEREBRUM_PATH"
CERECONF_CUSTOM=$CERECONF_PATH/"$CEREBRUM_INST"
export PYTHONPATH="$PYTHON_SITE_PACKAGES:$CERECONF_CUSTOM:$CERECONF_COMMON:$CERECONF_GLOBAL:$PYTHON_CEREBRUM_MODULES:$PYTHON_EXTERNAL"

# BOFH
BOFH_PROMPT="bofh (py$SHORTER_PYTHON_VERSION) $CEREBRUM_INST"
#BOFH_USER=bootstrap_account
BOFH_USER="$USER"
BOFH_BIN=/local/bin/bofh

# BOFHD
BOFHD_CONFIG_DAT="$CERECONF_PATH/bofhd/config.dat"
BOFHD_PY="$CEREBRUM_PATH/servers/bofhd/bofhd.py"
BOFHD_PORT=1337

# Show various settings, with colors
echo
echo -e "\e[92mCerebrum configuration:\e[0m"
echo
echo -e "\t\e[94mInstitution:\e[0m\t\t\e[91m$CEREBRUM_INST\e[0m"
echo -e "\t\e[94mDB user:\e[0m\t\t\e[97m$CEREBRUM_DATABASE_USER\e[0m"
echo -e "\t\e[94mDB host:\e[0m\t\t\e[97m$CEREBRUM_DATABASE_HOST\e[0m"
echo -e "\t\e[94mDB name:\e[0m\t\t\e[97m$CEREBRUM_DATABASE_NAME\e[0m"
echo -e "\t\e[94mDB table owner:\e[0m\t\t\e[97m$CEREBRUM_DATABASE_TABLE_OWNER\e[0m"
echo -e -n "\t\e[94mPython version:\e[0m\t\t\e[96m"
"$PYTHON_BIN" -c "import sys;print(sys.version.split(' ')[0])"
echo -e -n '\e[0m'
echo -e "\t\e[94mPython executable:\e[0m\t\e[93m$PYTHON_BIN\e[0m"
echo -e "\t\e[94mPYTHONPATH:\e[0m\e[90m"
"$PYTHON_BIN" -c "import os;print(os.linesep.join(['\t\t' + x for x in os.getenv('PYTHONPATH').split(':')])[:-3])"
echo -e -n '\e[0m'
echo

# --- $CERECONF_PATH/bofhd/config.dat ---
mkdir -p "$CERECONF_PATH/bofhd"
if [[ "$CEREBRUM_INST" == "tsd" ]]; then
  cat << 'EOF' > "$CERECONF_PATH/bofhd/config.dat"
# Config file for bofhd for TSD
Cerebrum.modules.dns.bofhd_dns_cmds/BofhdExtension
Cerebrum.modules.dns.Subnet/BofhdExtension
Cerebrum.modules.tsd.bofhd_tsd_cmds/AdministrationBofhdExtension
EOF
else
  cat << 'EOF' > "$CERECONF_PATH/bofhd/config.dat"
# Config file for bofhd
Cerebrum.modules.no.uio.bofhd_uio_cmds/BofhdExtension
Cerebrum.modules.no.uio.bofhd_guestaccounts_cmds/BofhdExtension
#Cerebrum.modules.no.uio.printer_quota.bofhd_pq_cmds/BofhdExtension
Cerebrum.modules.no.uio.bofhd_ephorte_cmds/BofhdExtension
#Cerebrum.modules.dns.bofhd_dns_cmds/BofhdExtension
#Cerebrum.modules.dns.Subnet/BofhdExtension
EOF
fi

# --- $CERECONF_PATH/common/cereconf.py ---
# Overwrite cereconf.py each time
mkdir -p "$CERECONF_PATH/common"
cat << 'EOF' > "$CERECONF_PATH/common/cereconf.py"
import sys, os, os.path
if os.getenv('CEREBRUM_INST') == "tsd":
    # uio defaults
    execfile('/cerebrum/uio/etc/cerebrum/cereconf.py')
    # assume cerebrum_sites is checked out in the same parent directory as the cerebrum checkout
    execfile(os.path.join(os.getenv('CEREBRUM_PATH'), '../cerebrum_sites/etc/tsd/cereconf.py'))
    if not 'Cerebrum.modules.tsd.OU/OUTSDMixin' in CLASS_OU:
        CLASS_OU += ('Cerebrum.modules.tsd.OU/OUTSDMixin', )
    BOFHD_SUPERUSER_GROUP = "usit"
    DB_AUTH_DIR = '/cerebrum/uio/etc/passwords'
    BOFHD_MOTD_FILE = '/cerebrum/uio/etc/cerebrum/bofhd_motd.txt'
else:
    execfile(os.path.join(os.getenv('CERECONF_GLOBAL'), 'cereconf.py'))

LOGGING_CONFIGFILE = os.getenv('LOGGING_CONFIGFILE', "LOGGING CONFIG FILE NOT SET")
LOGGING_ROOT_DIR = os.getenv('LOGGING_ROOT_DIR', "LOGGING ROOT DIR NOT SET")
CEREBRUM_DATABASE_CONNECT_DATA['user'] = os.getenv('CEREBRUM_DATABASE_USER', "DATABASE USER NOT SET")
CEREBRUM_DATABASE_CONNECT_DATA['host'] = os.getenv('CEREBRUM_DATABASE_HOST', "DATABASE HOST NOT SET")
CEREBRUM_DATABASE_NAME = os.getenv('CEREBRUM_DATABASE_NAME', "DATABASE NAME NOT SET")
CEREBRUM_DATABASE_CONNECT_DATA['table_owner'] = os.getenv('CEREBRUM_DATABASE_TABLE_OWNER', "DATABASE TABLE OWNER NOT SET")
EOF

# --- logging.ini ---
cat << 'EOF' > "$CERECONF_PATH/logging.ini"
# This could be a global logging file for Cerebrum.  All messages of
# level WARN and above are logged to a central log, while the various
# applications may use different logg-levels and files.  For testing,
# the console logger can be used.  It doesn't propagate log messages.

# Note: When propagating messages to other loggers, the handler level
# is used to determine wheter to log or not. For a logger propagating
# messages to its parent, do NOT set the level to NOTSET (otherwise
# the logger will assume the level of its parent.

# This is a common log for every script in Cerebrum, it should not
# be used directly.
[logger_root]
level=WARN
channel=
qualname=root
handlers=hand_root_error,hand_root_warn

# cronjob should be the normal logger for Cerebrum tasks.  It will log
# to a different directory for every script, with automatic rotation
# of old logs.  Messages are copied to the root logger.
[logger_cronjob]
level=DEBUG
propagate=1
channel=cronjob
qualname=cronjob
handlers=hand_cronjob

# console should be used for interactive testing only.  Notice that
# these log messages are not copied into the root logger.
[logger_console]
level=NOTSET
propagate=0
qualname=console
handlers=hand_console

# tee is both logging as cronjob and console. Notice that it logs all log
# levels.
[logger_tee]
level=NOTSET
propagate=0
qualname=tee
handlers=hand_cronjob,hand_console

[logger_bofhd]
level=DEBUG
propagate=1
qualname=bofhd
handlers=hand_bofhd1,hand_bofhd2

# We need to have the same server (bofhd, essentially) write to a different
# file, so that bofhd and bofhd-for-epay won't end up writing to the same
# location.
[logger_bofhdepay]
level=DEBUG
propagate=1
qualname=bofhdepay
handlers=hand_bofhdepay

[logger_big_shortlived]
level=DEBUG
propagate=1
channel=big_shortlived
qualname=big_shortlived
handlers=hand_big_shortlived

# process_students & friends get their own special logger. 
[logger_studauto]
level=DEBUG5
propagate=1
qualname=studauto
handlers=hand_studauto

[logger_bofhd_req]
level=DEBUG5
propagate=1
qualname=bofhd_req
handlers=hand_bofhd_req

# We want to use different loggers for user and group sync even though
# they both use the same sync. script
[logger_ad_usersync]
level=DEBUG
propagate=1
qualname=ad_usersync
handlers=hand_ad_usersync

[logger_ad_groupsync]
level=DEBUG
propagate=1
qualname=ad_groupsync
handlers=hand_ad_groupsync

# 
# The root logger has two handlers -- one scanned continuously with
# only errors; the other with WARN and higher which is scanned on
# daily basis.
[handler_hand_root_warn]
class=DelayedFileHandler
level=WARN
formatter=form_root
args=(os.path.join(cereconf.LOGGING_ROOT_DIR, 'rootwarn.log'), 'a+', 'utf-8')

[handler_hand_root_error]
class=DelayedFileHandler
level=ERROR
formatter=form_root
args=(os.path.join(cereconf.LOGGING_ROOT_DIR, 'rooterror.log'), 'a+', 'utf-8')

[handler_hand_cronjob]
class=CerebrumRotatingHandler
level=NOTSET
formatter=form_cronjob
args=(cereconf.LOGGING_ROOT_DIR, 'a+', 20*1024*1024, 9, 'utf-8')

[handler_hand_console]
class=StreamHandler
level=NOTSET
formatter=form_console
args=(sys.stdout,)

[handler_hand_bofhd1]
class=CerebrumSubstituteHandler
level=NOTSET
formatter=form_cronjob
# It is a pity that no other handlers support permissions
args=(os.path.join(cereconf.LOGGING_ROOT_DIR, "bofhd.py/secret/"), 
      2*1024*1024, 5, 0600, (), 'utf-8')

[handler_hand_bofhd2]
class=CerebrumSubstituteHandler
level=NOTSET
formatter=form_cronjob
args=(cereconf.LOGGING_ROOT_DIR, 50*1024*1024, 5, 0644,
      ((r"(misc_verify_password \(\('.*?', ').+?('\)\))", r"\1secret\2"),
       (r"(misc_check_password \(\(').*?(',\)\))", r"\1secret\2"),
       (r"(user_password \(\('[^']+', ').*?('\)\))", r"\1secret\2"),
       (r"(params=\('[^']+', )'.+?'(\), method=u'login')", r"\1secret\2")),
       'utf-8')

# Once in a blue moon, we might see a password in the bofhd-epay.log,
# so we need to be able to handle that. No need to have a
# "secret"-log, since the range of users involved is quite limited.
[handler_hand_bofhdepay]
class=CerebrumSubstituteHandler
level=NOTSET
formatter=form_cronjob
args=(cereconf.LOGGING_ROOT_DIR, 50*1024*1024, 5, 0644,
      ((r"(params=\('[^']+', )'.+?'(\), method=u'login')", r"\1secret\2"),),
       'utf-8', 'bofhd.py-epay')


# What we want here is a handler that rotates by date.  Unfortunately
# we currently don't have such a handler.
[handler_hand_big_shortlived]
class=CerebrumRotatingHandler
level=NOTSET
formatter=form_cronjob
args=(cereconf.LOGGING_ROOT_DIR, 'a+', 50*1024*1024, 9, 'utf-8')

# Regardless the log size, each job run gets its own file (tagged with
# a timestamp)
[handler_hand_studauto]
class=OneRunHandler
level=NOTSET
formatter=form_studauto
args=(os.path.join(cereconf.LOGGING_ROOT_DIR, 'studentautomatikk'), 'w', 'utf-8')

[handler_hand_bofhd_req]
class=OneRunHandler
level=NOTSET
formatter=form_cronjob
args=(os.path.join(cereconf.LOGGING_ROOT_DIR, 'process_bofhd_requests'), 'a', 'utf-8')

# Handlers for ad loggers. Make sure passwords are not written to log
# files
[handler_hand_ad_usersync]
class=CerebrumSubstituteHandler
level=NOTSET
formatter=form_cronjob
args=(cereconf.LOGGING_ROOT_DIR, 50*1024*1024, 5, 0644, 
      ((r"(ProtocolError:.*?cerebrum:)(.*?)(@.*)", r"\1<secret>\3"),),
      'utf-8', '', 'usersync.log')

[handler_hand_ad_groupsync]
class=CerebrumSubstituteHandler
level=NOTSET
formatter=form_cronjob
args=(cereconf.LOGGING_ROOT_DIR, 50*1024*1024, 5, 0644, 
      ((r"(ProtocolError:.*?cerebrum:)(.*?)(@..*)", r"\1<secret>\3"),),
      'utf-8', '', 'groupsync.log')

[formatter_form_root]
format=%(asctime)s %(filename)s[%(process)d]: %(levelname)s %(message)s
datefmt=%F %T

[formatter_form_cronjob]
format=%(asctime)s %(levelname)s %(message)s
datefmt=%F %T

[formatter_form_console]
format=%(levelname)s %(asctime)s %(message)s
datefmt=%F %T

# Indenting helps humans visualize hierarchical information
[formatter_form_studauto]
format=%(indent)s%(message)s
datefmt=%F %T
EOF

# Comment this out or remove the .autogenerated file for preserving manual edits
cat << 'EOF' > "$CERECONF_PATH/$AUTOGEN_MARKER_FILE"
All files in this directory are cleared out and generated each time .cerebrumrc is sourced
EOF
