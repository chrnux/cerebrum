Introduction
=============
This program is used to push information about persons and roles from an 
XML file into ePhorte.  Since it is currently only used by Cerebrum, 
no attempt has been made to formalize this XML format.

The data is pushed to ePhorte through ePhortes Web Service interface,
using the Apache Axis WebService framework.

Exporting
============
Right-click exportjar.jardesc and select "Create JAR".  This will create a file 
/tmp/ephorte.jar.  The resulting jar will have dependencies on a number of other
jar files (those in this projects .classpath file).  Unfortunately, you cannot
do something like "java -cp CLASSPATH -jar ephorte.jar", due to the way Suns default
ClassLoader behaves.  One approach would be to use the Class-Path option in the manifest,
but this would require hardcoding jar names.  The most elegant aproach is probably
a custom jar-in-jar classloader.  For now, use something like the script run_import.sh

Design
========
Data is read from ePhorte using the GetDataSet method, and written using the 
UpdatePersonByXml and UpdateByXml methods.  These methods are closely tied to
the database-schema (though ePhorte has some logic preventing illegal writes
throguh the WebService).

We have created a simple data model in the ephorte.data package.  When reading
data from ePhorte, or the XML export-file, we create instances of classes in this 
package.  By comparing instances of these classes, we determine what type of 
change is required in ePhorte.

These data classes have logic for instantiating themselves from a database-row as 
returned by ePhortes GetDataSet method, as well as creating a XML-structure
required to create the corresponding row in ePhorte.

Offline testing
================
If EphorteGW.USE_DEBUG_CONNECTION is true, XML queries will return
pre-defined xml-results in queries.  This can be useful to see how
the program handles certain data-combinations in ePhorte.  See the 
EphorteConnectionTest class for details.

Logging
=========
Both axis and this program uses the logging framework.  You should 
configure your log4j.properties file to log warning in a suitable 
location.

To get a dump of all WebService traffic, add:
  log4j.logger.org.apache.axis.transport=DEBUG

To get debugging info from this program, add:
  log4j.logger.ephorte=DEBUG



https and test sertificates
==============================
If you are accessing a test-server with a broken certificate, the following
will cause java to ignore certificate validation errors::

  echo org.apache.axis.components.net.SunFakeTrustSocketFactory > bin/META-INF/services/org.apache.axis.components.net.SecureSocketFactory

Remember not to use this feature in a production environment if you can avoid
it as you open for man-in-the-middle attacks.

About ephorte-stubs.jar
========================
The ephorte-stubs.jar file contains the WebService interface to ePhorte.  It 
can be automatically generated from the ePhorte  WSDL file using wsdl2java.

In eclipse, it can be generated by creating a new project and choosing 
"File -> New -> Other -> Web Service Client".  Give the URL to the WSDL
document (https://eph-test-1.trofast.uio.no/uio/Shared/Webservices/Services.asmx?WSDL
Note that the GUI wants the URL to end with .WSDL, so you probably have to download
the file and its referred ThemeData.asmx file (fix the reference in the WSDL file)).
Select current project as output folder, and click Finish.  Two ThemeData classes ends 
up in "(default package)".  Rename this package to "other".

Resolve any errors, and export the project as a jar file.

The resulting file will be dependant on a number of libraries (the version may wary):

  * axis.jar
  * commons-discovery-0.2.jar
  * jaxrpc.jar
  * saaj.jar
  * wsdl4j-1.5.1.jar
  * commons-logging-1.0.4.jar
  * log4j-1.2.8.jar
