#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
#
# Copyright 2013 University of Oslo, Norway
#
# This file is part of Cerebrum.
#
# Cerebrum is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Cerebrum is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cerebrum; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
"""Job for importing XML files generated from Nettskjema surveys.

The data from Nettskjema is normally generated by researchers, asking for new
projects, registering themselves, adding changes to the project or asking about
new project resources. The person who has sent in the form has been
authenticated, e.g. by ID-porten, but no authorizations has been checked. All
requests from the XML files must therefore be approved before it could be e.g.
synced to AD, or do anything harmful, like changing a person's name. Projects
and accounts must for instance start with a quarantine, to be approved by
superusers.

"""

import sys
import os
import getopt
from lxml import etree
from mx import DateTime
import traceback

import cerebrum_path
import cereconf

from Cerebrum import Errors
from Cerebrum.Utils import Factory

logger = Factory.get_logger('cronjob')
db = Factory.get('Database')()
co = Factory.get('Constants')(db)
ou = Factory.get('OU')(db)
pe = Factory.get('Person')(db)
ac = Factory.get('Account')(db)

ac.find_by_name(cereconf.INITIAL_ACCOUNTNAME)
systemaccount_id = ac.entity_id

def usage(exitcode=0):
    print """%(doc)s 
    
    Usage: %s FILE_OR_DIR [MORE_FILES_AND_DIRS...]

    Where FILE_OR_DIR is the XML files to import, or directories where all the
    XML files should be imported from.

    -h
    --help            Show this and quit.
    """ % {'doc': __doc__,
           'file': os.path.basename(sys.argv[0])}
    sys.exit(exitcode)

def gateway(command, *args):
    """Send commands to the gateway
    
    The gateway needs to be informed about changes that are useful for it. This
    should only happen when not in dryrun.

    """
    logger.debug("Gateway call: %s(%s)", command, ', '.join(args))
    if dryrun:
        return True
    # TODO: not implemented yet
    return True

def process_files(locations, dryrun):
    """Do the process thing."""
    for location in locations:
        # TODO: not sure if we want to import whole directores...
        try:
            if process_file(location, dryrun):
                # TODO: might want to move the file if it was successful?
                pass
        except Errors.CerebrumError, e:
            logger.warn("Failed processing %s: %s", location, e)
            traceback.print_exc()

def process_file(file, dryrun):
    logger.info("Processing file: %s", file)
    xml = etree.parse(file).getroot()
    print type(xml)
    print etree.tostring(xml, pretty_print=True)

    if xml.tag == 'new_project':
        create_project(xml)
    elif xml.tag == 'new_person':
        create_person(xml)
    # TODO: add more tags here?
    # - Manage project accounts
    # - Manage project
    else:
        raise Error.CerebrumError('Unknown root tag in XML file: %s', xml.tag)

def create_project(data):
    """Create a given project.

    @type data: etree.Element
    @param data: The data about the requested project.

    """
    projectname = data.get('id')
    logger.info('Creating new project: %s', projectname)

    # Validate the name, raise errors if not valid
    ou._validate_project_name(projectname)

    # TODO: add validation, but wait until the XML is defined properly!

    # Make sure it's not already in use:
    ou.clear()
    try:
        ou.find_by_tsd_projectname(projectname)
        raise Errors.CerebrumError('Project name already exists: %s' %
                                   projectname)
    except Errors.NotFoundError: 
        pass
    ou.clear()
    ou.populate()
    ou.write_db()
    gateway('project.create', projectname)

    # Storing the names:
    ou.add_name_with_language(name_variant=co.ou_name_acronym,
                              name_language=co.language_en, name=projectname)
    longname = data.find('long_title').text
    logger.debug("Storing long name: %s", longname)
    ou.add_name_with_language(name_variant=co.ou_name_long,
                              name_language=co.language_en, name=longname)
    shortname = data.find('short_title').text
    logger.debug("Storing short name: %s", shortname)
    ou.add_name_with_language(name_variant=co.ou_name_long,
                              name_language=co.language_en, name=shortname)
    ou.write_db()

    # Always start projects quarantined, needs to be approved first!
    ou.add_entity_quarantine(type=co.quarantine_not_approved,
                             creator=systemaccount_id,
                             description='Project not approved yet')
    ou.write_db()

    # Storing the dates:
    endtime = DateTime.strptime(data.find('project_end').text, '%d.%m.%Y')
    if endtime < DateTime.now():
        raise Errors.CerebrumError("End date of project has passed: %s" %
                                   endtime)
    ou.add_entity_quarantine(type=co.quarantine_project_end,
                             creator=systemaccount_id,
                             description='Initial requested lifetime for project',
                             start=endtime)
    ou.write_db()

    starttime = DateTime.strptime(data.find('project_start').text, '%d.%m.%Y')
    if starttime > DateTime.now():
        ou.add_entity_quarantine(type=co.quarantine_project_start,
                                 creator=systemaccount_id,
                                 description='Initial requested starttime for project',
                                 end=starttime)
        ou.write_db()

    # TODO: should we care about the start date? We could then create another
    # quarantine, called project_not_started_yet, and set if the date is in the
    # future?

    # TODO: more to store in cerebrum:
    # institution - where to store this? what is it used for?
    # project responsible
    # project_admin
    #
    # os_first_wm
    # new_user - create users automatically?

    ou.write_db()
    logger.debug("New project created successfully: %s", projectname)
    # TODO: How should we signal that a new project is waiting approval?
    return True

def create_person(data):
    """Create a person object with the given data.

    Note that the given information could be filled out by anyone. The
    administratrors of TSD must therefore approve the information before the
    person could be used in Cerebrum.

    @type data: etree.Element
    @param data: The data about the requested person.

    """
    logger.debug('Creating new person...')

    projectname = data.id('projectid')
    name = data.get('name')
    uio_username = data.get('uioname')
    fnr = data.get('fnr')
    # TODO: Validate the information!

    # The person must be registered to a project, even though it's not necessary
    # for creating the person.
    ou.clear()
    ou.find_by_tsd_projectname(projectname)

    # TODO: What to do if the person already exists? Stop importing is okay?
    if tuple(pe.list_external_ids(id_type=co.externalid_fodselsnr,
                                  external_id=fnr)):
        raise Errors.CerebrumError('Person already exists with fnr: %s' % fnr)

    username = '%s-%s' % (projectname, uio_username)

    # TODO: if the UiO username is already taken, create another username?
    if tuple(ac.search(name=username)):
        raise Errors.CerebrumError('Username already taken: %s' % uio_username)

    # TODO: What if the person already exists with the given ID? Use that?

    # Create the person, if not already existing
    # TODO: get birth_data from fnr?
    pe.clear()
    pe.populate(birth_data=None, gender=co.gender_unknown,
                description='TSD registered person')
    pe.write_db()
    pe.affect_external_id(co.system_nettskjema, co.externalid_fodselsnr)
    pe.populate_external_id(co.system_nettskjema, co.externalid_fodselsnr, fnr)
    pe.write_db()

    # Add the PA affiliation:
    pe.populate_affiliation(source_system=co.system_nettskjema,
                            ou_id=ou.entity_id,
                            affiliation=co.affiliation_project,
                            status=co.affiliation_status_project_admin)
    pe.write_db()

    # Create the account
    ac.clear()
    # TODO: expire_date, set it a few months after the project's end date?
    ac.populate(username, owner_type=co.entity_person, owner_id=pe.entity_id,
                #expire_date= TODO,
                creator_id=systemaccount_id)
    ac.write_db()
    ac.add_entity_quarantine(co.quarantine_not_approved, systemaccount_id,
                             description='Person registered through Nettskjema',
                             start=DateTime.now())
    ac.write_db()

    # TODO: create person
    logger.info('New person created, entity_id: %s', pe.entity_id)

if __name__=='__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hd',
                                   ['help', 'dryrun'])
    except getopt.GetoptError, e:
        print e
        usage(1)

    global dryrun
    dryrun = False

    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-d', '--dryrun'):
            dryrun = True
        else:
            print "Unknown argument: %s" % opt
            usage(1)

    process_files(args, dryrun)

    if dryrun:
        db.rollback()
        logger.info("Dryrun, rolled back changes")
    else:
        db.commit()
        logger.info("Commited changes")
