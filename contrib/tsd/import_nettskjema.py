#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
#
# Copyright 2013 University of Oslo, Norway
#
# This file is part of Cerebrum.
#
# Cerebrum is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Cerebrum is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cerebrum; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
"""Job for importing XML files that has been generated by Nettskjema.

The data from Nettskjema is normally generated by researchers, asking for new
projects, registering themselves, adding changes to the project or asking about
new project resources. The person who has sent in the form has been
authenticated, e.g. by ID-porten, but no authorizations has been checked. All
requests from the XML files must therefore be approved before it could be e.g.
synced to AD, or do anything harmful, like changing a person's name. Projects
and accounts must for instance start with a quarantine, to be approved by
superusers.

"""

import sys
import os
import getopt
from lxml import etree
from mx import DateTime

import cerebrum_path
import cereconf

from Cerebrum import Errors
from Cerebrum.Utils import Factory

logger = Factory.get_logger('cronjob')
db = Factory.get('Database')()
co = Factory.get('Constants')(db)
ou = Factory.get('OU')(db)
ac = Factory.get('Account')(db)

ac.find_by_name(cereconf.INITIAL_ACCOUNTNAME)
systemaccount_id = ac.entity_id

def usage(exitcode=0):
    print """%(doc)s 
    
    Usage: %s FILE_OR_DIR [MORE_FILES_AND_DIRS...]

    Where FILE_OR_DIR is the XML files to import, or directories where all the
    XML files should be imported from.

    -h
    --help            Show this and quit.
    """ % {'doc': __doc__,
           'file': os.path.basename(sys.argv[0])}
    sys.exit(exitcode)

def gateway(command, *args):
    """Send commands to the gateway
    
    The gateway needs to be informed about changes that are useful for it. This
    should only happen when not in dryrun.

    """
    logger.debug("Gateway call: %s(%s)", command, ', '.join(args))
    if dryrun:
        return True
    # TODO: not implemented yet
    return True

def process_files(locations, dryrun):
    """Do the process thing."""
    for location in locations:
        # TODO: not sure if we want to import whole directores...
        #try:
            if process_file(location, dryrun):
                # TODO: might want to move the file if it was successful?
                pass
        #except Exception, e:
        #    logger.warn("Failed processing %s: %s", location, e)

def process_file(file, dryrun):
    logger.info("Processing file: %s", file)
    xml = etree.parse(file).getroot()
    print type(xml)
    print etree.tostring(xml, pretty_print=True)

    # TODO: find a tag in the XML file to check what it wants:
    # - Create a project
    # - Create a person
    # - Manage project accounts
    # - Manage project
    if xml.tag == 'new_project':
        create_project(xml)
    # TODO: add more tags here
    else:
        raise Exception('Unknown root tag in XML file: %s', xml.tag)

def create_project(data):
    """Create a given project.

    @type data: etree.Element
    @param data: The data about the project.

    """
    projectname = data.get('id')
    logger.info('Creating new project: %s', projectname)

    # TODO: add validation, but wait until the XML is defined properly!

    # Make sure it's not already in use:
    ou.clear()
    try:
        ou.find_by_tsd_projectname(projectname)
        raise Exception('Project name already exists: %s' % projectname)
    except Errors.NotFoundError: 
        pass
    ou.clear()
    ou.populate()
    ou.write_db()
    gateway('project.create', projectname)

    # Storing the names:
    ou.add_name_with_language(name_variant=co.ou_name_acronym,
                              name_language=co.language_en, name=projectname)
    longname = data.find('long_title').text
    logger.debug("Storing long name: %s", longname)
    ou.add_name_with_language(name_variant=co.ou_name_long,
                              name_language=co.language_en, name=longname)
    shortname = data.find('short_title').text
    logger.debug("Storing short name: %s", shortname)
    ou.add_name_with_language(name_variant=co.ou_name_long,
                              name_language=co.language_en, name=shortname)
    ou.write_db()

    # Always start projects quarantined, needs to be approved first!
    ou.add_entity_quarantine(type=co.quarantine_not_approved,
                             creator=systemaccount_id,
                             description='Project not approved yet')
    ou.write_db()

    # Storing the dates:
    endtime = DateTime.strptime(data.find('project_end').text, '%d.%m.%Y')
    if endtime < DateTime.now():
        raise Exception("End date of project has passed: %s" % endtime)
    ou.add_entity_quarantine(type=co.quarantine_project_end,
                             creator=systemaccount_id,
                             description='Initial requested lifetime for project',
                             start=endtime)
    # TODO: should we care about the start date?


    # TODO, more to store in cerebrum:
    # institution - where to store this? what is it used for?
    # project responsible
    # project_admin
    #
    # os_first_wm
    # new_user - create users automatically?

    ou.write_db()
    logger.debug("New project created successfully: %s", projectname)
    return True

if __name__=='__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hd',
                                   ['help', 'dryrun'])
    except getopt.GetoptError, e:
        print e
        usage(1)

    global dryrun
    dryrun = False

    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-d', '--dryrun'):
            dryrun = True
        else:
            print "Unknown argument: %s" % opt
            usage(1)

    process_files(args, dryrun)

    if dryrun:
        db.rollback()
        logger.info("Dryrun, rolled back changes")
    else:
        db.commit()
        logger.info("Commited changes")
