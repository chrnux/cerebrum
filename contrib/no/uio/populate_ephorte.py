#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

import getopt
import sys
import cerebrum_path
import cereconf
from Cerebrum import Errors
from Cerebrum.Utils import Factory, XMLHelper, SimilarSizeWriter
from Cerebrum.modules import CLHandler
from Cerebrum.modules.no.Stedkode import Stedkode
from Cerebrum.modules.no.uio.Ephorte import EphorteRole

progname = __file__.split("/")[-1]
__doc__ = """
This script adds ephorte_roles and ephorte-spreads to persons
(employees) in Cerebrum according to the rules in
ephorte-sync-spec.rst

Usage: %s [options]
  -p fname : stedinfo

""" % progname

db = Factory.get('Database')()
db.cl_init(change_program="populate_ephorte")

co = Factory.get('Constants')(db)
ac = Factory.get('Account')(db)
pe = Factory.get('Person')(db)
group = Factory.get('Group')(db)
ephorte_role = EphorteRole(db)
ou = Stedkode(db)
cl = CLHandler.CLHandler(db)

logger = Factory.get_logger("cronjob")

class SimpleRole(object):
    def __init__(self, role_type, adm_enhet, arkivdel, journalenhet):
        self.role_type = role_type
        self.adm_enhet = adm_enhet
        self.arkivdel = arkivdel
        self.journalenhet = journalenhet

    def __eq__(self, b):
        return (self.role_type == b.role_type and self.adm_enhet == b.adm_enhet and
                self.arkivdel == b.arkivdel and self.journalenhet == b.journalenhet)

    def __str__(self):
        return "role_type=%s, adm_enhet=%s, arkivdel=%s, journalenhet=%s" % (
            self.role_type, self.adm_enhet, self.arkivdel,
            self.journalenhet)


class PopulateEphorte(object):
    def __init__(self, ephorte_sko_file):
        "Pre-fetch information about OUs in ePhorte and Cerebrum."

        logger.info("Fetching OU info from Cerebrum")
        sko2ou_id = {}           # stedkode -> ouid 
        self.ouid_2roleinfo = {} # ouid -> (arkivdel, journalenhet) 
        self.ouid2sko = {}       # ouid -> stedkode 
        for row in ou.get_stedkoder():
            sko = "%02i%02i%02i" % tuple([
                int(row[x]) for x in ('fakultet', 'institutt', 'avdeling')])
            ou_id = int(row['ou_id'])
            self.ouid2sko[ou_id] = sko
            sko2ou_id[sko] = ou_id
            # Specal case, SO
            if sko in cereconf.EPHORTE_SO_SKO:
                self.ouid_2roleinfo[ou_id] = (
                    int(co.ephorte_arkivdel_sak_so), int(co.ephorte_journenhet_so))
            # Special case, NIKK
            elif sko in cereconf.EPHORTE_NIKK_SKO:
                self.ouid_2roleinfo[ou_id] = (
                    int(co.ephorte_arkivdel_sak_nikk), int(co.ephorte_journenhet_nikk))
            # Default case
            else:
                self.ouid_2roleinfo[ou_id] = (
                    int(co.ephorte_arkivdel_sak_uio), int(co.ephorte_journenhet_uio))
        logger.info("Found info about %d sko in cerebrum" % len(self.ouid2sko))

        # ephorte_sko_file can be generated by running the command:
        # ./run_import.sh -d admindel -t AdminDel -p eph-conn.props
        logger.info("Fetching OU info from ePhorte reading file %s" % ephorte_sko_file)
        lines = file(ephorte_sko_file).readlines()
        tmp = lines.pop(0).split(';')
        posname2num = dict((tmp[n], n) for n in range(len(tmp)))
        self.known_ephorte_ou = []
        for line in lines:
            ephorte_sko = line.split(";")[posname2num['AI_FORKDN']]
            # TODO: skal vi gjøre noe med root-noden UIO?
            #       Foreløbig skipper vi den
            if ephorte_sko == 'UIO':
                continue  
            ou_id = sko2ou_id.get(ephorte_sko)
            if ou_id is None:
                logger.warn("Ukjent ePhorte-sted: '%s'" % ephorte_sko)
                continue
            self.known_ephorte_ou.append(ou_id)
        logger.debug("Found %d ephorte sko." % len(self.known_ephorte_ou))

        # Find the OU hierarchy 
        self.ou_id2parent = {}
        for row in ou.get_structure_mappings(co.perspective_sap):
            i = row['parent_id'] and int(row['parent_id']) or None
            self.ou_id2parent[int(row['ou_id'])] = i

        # superuser-rollen skal ha UiOs rotnode som adm_enhet
        self._superuser_role = SimpleRole(
            int(co.ephorte_role_sy), sko2ou_id[cereconf.EPHORTE_UIO_ROOT_SKO],
            int(co.ephorte_arkivdel_sak_uio), int(co.ephorte_journenhet_uio))

    def map_ou2role(self, ou_id):
        arkiv, journal = self.ouid_2roleinfo[ou_id]
        return SimpleRole(int(co.ephorte_role_sb), ou_id, arkiv, journal)
    
    def run(self):
        """Automatically add roles and spreads for employees according to
        rules in ephorte-sync-spec.rst """

        logger.info("Listing affiliations")
        person2ou = {} # person -> {ou_id:1, ...}
        non_ephorte_ous = []
        # Find where an employee has an ANSATT affiliation and check
        # if that ou is an ePhorte ou. If not try to map to nearest
        # ePhorte OU as specified in ephorte-sync-spec.rst
        for row in pe.list_affiliations(source_system=co.system_sap,
                                        affiliation=co.affiliation_ansatt):
            ou_id = int(row['ou_id'])
            if ou_id is not None and ou_id not in self.known_ephorte_ou:
                if not ou_id in non_ephorte_ous:
                    non_ephorte_ous.append(ou_id)
                    logger.debug("OU %s is not an ePhorte OU. Try parent: %s" % (
                        self.ouid2sko[ou_id],
                        self.ouid2sko.get(self.ou_id2parent.get(ou_id))))
                ou_id = self.ou_id2parent.get(ou_id)
            # No ePhorte OU found. Log a warning
            # Her kunne vi valgt å plasere personen på root-noden
            # (900199), men det ønsker vi ikke(?)
            if ou_id is None or ou_id not in self.known_ephorte_ou:
                logger.warn("Failed mapping '%s' to known ePhorte OU. " %
                            self.ouid2sko[int(row['ou_id'])] + 
                            "Skipping affiliation %s@%s for person %s" % (
                    co.affiliation_ansatt, self.ouid2sko[int(row['ou_id'])],
                    row['person_id']))
                continue
            person2ou.setdefault(int(row['person_id']), {})[ou_id] = 1

        logger.info("Listing roles")
        person2roles = {}
        for row in ephorte_role.list_roles():
            person2roles.setdefault(int(row['person_id']), []).append(
                SimpleRole(int(row['role_type']), int(row['adm_enhet']),
                           row['arkivdel'], row['journalenhet']))

        has_ephorte_spread = {}
        for row in pe.list_all_with_spread(co.spread_ephorte_person):
            has_ephorte_spread[int(row['entity_id'])] = True

        # Ideally, the group should have persons as members, but bofh
        # doesn't have much support for that, so we map user->owner_id
        # instead
        superusers = []
        group.find_by_name(cereconf.EPHORTE_ADMINS)
        for account_id in group.get_members():
            ac.clear()
            ac.find(account_id)
            superusers.append(int(ac.owner_id))

        # All neccessary data has been fetched. Now we can check if
        # persons have the roles they should have.
        logger.info("Start comparison of roles")
        for person_id, ous in person2ou.items():
            auto_roles = []  # The roles an employee automatically should get
            existing_roles = person2roles.get(person_id, [])
            # Add saksbehandler role for each ephorte ou where an
            # employee has an affiliation
            for t in ous:
                auto_roles.append(self.map_ou2role(t))
            if person_id in superusers:
                auto_roles.append(self._superuser_role)
            # All employees shall have ephorte spread
            if not has_ephorte_spread.get(person_id):
                pe.clear()
                pe.find(person_id)
                pe.add_spread(co.spread_ephorte_person)

            for ar in auto_roles:
                # Check if role should be added
                if ar in existing_roles:
                    existing_roles.remove(ar)
                else:
                    logger.debug("Adding role (pid=%i): %s" % (person_id, ar))
                    ephorte_role.add_role(person_id, ar.role_type, ar.adm_enhet,
                                          ar.arkivdel, ar.journalenhet)
            for er in existing_roles:
                # Only saksbehandler role can be removed. Any other
                # roles have been given in bofh and should not be touched.
                if er.role_type == int(co.ephorte_role_sb):
                    logger.debug("Removing role (pid=%i): %s" % (person_id, er))
                    ephorte_role.remove_role(person_id, er.role_type, er.adm_enhet,
                                             er.arkivdel, er.journalenhet)

        logger.info("All done")
        db.commit()

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'p:', ['help'])
    except getopt.GetoptError:
        usage(1)

    for opt, val in opts:
        if opt in ('--help',):
            usage()
        elif opt in ('-p',):
            pop = PopulateEphorte(val)
            pop.run()
    if not opts:
        usage(1)

def usage(exitcode=0):
    print __doc__
    sys.exit(exitcode)

if __name__ == '__main__':
    main()
