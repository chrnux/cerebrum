#!/usr/bin/env python2.2
# -*- coding: iso-8859-1 -*-

# Copyright 2003 University of Oslo, Norway
#
# This file is part of Cerebrum.
#
# Cerebrum is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Cerebrum is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cerebrum; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

import getopt
import sys
import os
import re

import xml.sax

import cerebrum_path
import cereconf
from Cerebrum import Errors
from Cerebrum import Person
from Cerebrum.Utils import Factory
from Cerebrum.modules import Email
from Cerebrum.modules import PosixUser
from Cerebrum.modules.no import fodselsnr

def process_line(infile):
    f = file(infile, 'r')

    # Iterate over all persons:
    l = f.readline().strip()
    while l:
        fld = l.split(':')
        if len(fld) <> 4:
            print "Bad line: %s. Skipping" % l
            continue
        fnr, uname, type, addr = fld
        p = process_person(fnr)
        if p: 
            a = process_user(p, uname)
        else:
            print "Bad fnr. Skipping: %s" % line
            continue
        if a:
            process_mail(a, type, addr)
        l = f.readline().strip()


def process_person(fnr):
    if not fodselsnr.personnr_ok(fnr):
        return None
    if fnr2person_id.has_key(fnr):
        return fnr2person_id[fnr]
    new_person = Person.Person(db)
    gender = co.gender_male
    if fodselsnr.er_kvinne(fnr):
        gender = co.gender_female
    year, mon, day = fodselsnr.fodt_dato(fnr)
    new_person.populate(db.Date(year, mon, day), gender)
    new_person.affect_external_id(co.system_migrate,
                                  co.externalid_fodselsnr)
    new_person.populate_external_id(co.system_migrate,
                                    co.externalid_fodselsnr,
                                    fnr)
    new_person.write_db()
    db.commit()
    e_id = new_person.entity_id
    new_person.clear()
    fnr2person_id[fnr] = e_id
    return e_id
    
def process_user(owner_id, uname):
    try:
        ac.find_by_name(uname)
    except Errors.NotFoundError:
        ac.populate(uname,
                    co.entity_person,
                    owner_id,
                    None,
                    default_creator_id,
                    None)
        ac.write_db()
        db.commit()
    a_id = ac.entity_id
    ac.clear()
    return a_id

def process_mail(acc_id, type, addr):
    et = Email.EmailTarget(db)
    ea = Email.EmailAddress(db)
    edom = Email.EmailDomain(db)
    epat = Email.EmailPrimaryAddressTarget(db)

    fld = addr.split('@')
    if len(fld) <> 2:
        print "Bad address: %s. Skipping" % addr
        return None
    lp, dom = fld
    try:
        edom.find_by_domain(dom)
    except Errors.NotFoundError:
        edom.populate(dom, "Generated by import_uname_mail.")
        edom.write_db()
        db.commit()
    try:
        et.find_by_entity(int(acc_id))
    except Errors.NotFoundError:
        et.populate(co.email_target_account, entity_id=int(acc_id),
                    entity_type=co.entity_account)
        et.write_db()
        db.commit()
    try:
        ea.find_by_address(addr)
    except Errors.NotFoundError:
        ea.populate(lp, edom.email_domain_id, et.email_target_id)
        ea.write_db()
        db.commit()
    if type == "defaultmail":
        try:
            epat.find(et.email_target_id)
        except Errors.NotFoundError:
            epat.clear()
            epat.populate(ea.email_addr_id, parent=et)
            epat.write_db()
            db.commit()
    et.clear()
    ea.clear()
    edom.clear()
    epat.clear()
        
def usage():
    print """Usage: import_uname_mail.py
    -v, --verbose : Show extra information.
    -f, --file    : File to parse.
    """


def main():
    global verbose, db, co, ac, person, fnr2person_id, default_creator_id
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'vf:', ['verbose','file'])
    except getopt.GetoptError:
        usage()

    for opt, val in opts:
        if opt in ('-v', '--verbose'):
            verbose += 1
        elif opt in ('-f', '--file'):
            infile = val

    if infile is None:
        usage()

    db = Factory.get('Database')()
    db.cl_init(change_program='import_uname_mail')
    co = Factory.get('Constants')(db)
    ac = Factory.get('Account')(db)
    person = Person.Person(db)

    fnr2person_id = {}

    for p in person.list_external_ids(id_type=co.externalid_fodselsnr):
        fnr2person_id[p['external_id']] = p['person_id']

    ac.find_by_name(cereconf.INITIAL_ACCOUNTNAME)
    default_creator_id = ac.entity_id
    ac.clear()
    process_line(infile)
    db.commit()

if __name__ == '__main__':
    main()
