#! /bin/sh -e 
# postinst script for cerebrum-server
#
# see: dh_installdeb(1)

# Load the debconf library - this must come FIRST; do not insert any other
# commands before this
. /usr/share/debconf/confmodule

#set -x

##
## Some Postgresql stuff
##
db_get postgresql/initdb/location
PGDATA=${POSTGRES_DATA:=${RET:-/var/lib/postgres/data}}
PGBASE=/usr/lib/postgresql
PGLIB=${PGBASE}/lib
PATH=${PATH}:${PGBASE}/bin
export PGDATA PGLIB PATH
PGHOME=${POSTGRES_HOME:=`dirname ${PGDATA}`}
PGSHELL=`getent passwd postgres | awk -F: '{print $7}'`

if [ -z "${PGSHELL}" ]
then
    PGSHELL=/bin/sh
fi

PGSHELL=`basename ${PGSHELL}`
case ${PGSHELL} in

    bash)
	PROFILE=.bash_profile
	;;
    sh | ksh)
	PROFILE=.profile
	;;
    csh | tcsh)
	PROFILE=.login
	;;
    *)
	PROFILE=.profile
	;;
esac

##
## temporary files
##

SCRIPTFILE=`mktemp ${TMPDIR:=/tmp}/cere-script.XXXXXX` || exit 1
chown postgres.postgres $SCRIPTFILE
TMPFILE=`mktemp ${TMPDIR:=/tmp}/cere-tmp.XXXXXX` || exit 1
chown postgres.postgres $TMPFILE 
MAILFILE=`mktemp ${TMPDIR:=/tmp}/cere-mail.XXXXXX` || exit 1
chown postgres.postgres $MAILFILE
MAILSUBJECT="cerebrum-server installation"

# arrange to delete the temporary files and mail output to root
# when this script terminates
trap "rm -f ${TMPFILE} ${SCRIPTFILE}; ([ -s $MAILFILE ] && mail -s '$MAILSUBJECT' root < ${MAILFILE}); rm -f $MAILFILE" 0


function prepare_db() {

    secret=`dd if=/dev/urandom count=20 bs=1 2>/dev/null | md5sum | cut -c1-32`
    
    cat <<EOI > $SCRIPTFILE
#!/bin/sh -x -e
cd ${PGHOME}
. ./${PROFILE}
#export PATH=/usr/lib/postgresql/bin:/bin:/usr/bin
if psql -l | grep -qs cerebrum ; then
    echo "Database exists" > $TMPFILE
    if echo "\dt \q" | psql cerebrum | grep -qs '^No relations found\.$' ; then
        echo "Database is not populated yet" >> $TMPFILE
    else
        echo "Database is populated" >> $TMPFILE 
    fi
else
    echo "Database did not exist yet" > $TMPFILE
    createdb -E unicode cerebrum >> $TMPFILE 2>&1    
fi
if echo "\du cerebrum \q" | psql cerebrum | tail -n 2 | grep -qs '(0 row)' ; then
    echo "User did not exit yet" >> $TMPFILE
    echo "CREATE USER cerebrum WITH PASSWORD '$secret';" | psql cerebrum >> $TMPFILE 2>&1
else
    echo "User exists" >> $TMPFILE 
fi
EOI
    if /sbin/start-stop-daemon --chuid postgres \
	--name `basename $SCRIPTFILE` --start \
	--startas /bin/sh -- $SCRIPTFILE 
	then
	# Success!
	if grep -qs "User did not exist yet" $TMPFILE ; then 
	    printf "cerebrum\t$secret\n" > /etc/cerebrum/passwd-cerebrum@cerebrum
	fi
	if grep -qs "Database is not populated yet" $TMPFILE ; then 
	    makedb.py \
		--extra-file=design/bofhd_tables.sql \
		--extra-file=design/mod_password_history.sql \
		--extra-file=design/bofhd_auth.sql \
		--extra-file=design/mod_posix_user.sql \
		--extra-file=design/mod_changelog.sql \
		--extra-file=design/mod_stedkode.sql \
		--extra-file=design/mod_email.sql 
	fi
    fi
    
}



# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

case "$1" in
    configure)

	if [ -z $(getent passwd cerebrum) ]; then
	    adduser --system --no-create-home cerebrum
	fi


	db_get cerebrum-server/db-auto-config
	db_auto_config=$RET
	if [ $db_auto_config ] ; then
	    prepare_db	    
	else 
	    echo "create your db yourself!"
	fi
	
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#
