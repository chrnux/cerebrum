#! /bin/sh -e 
# postinst script for cerebrum-server
#
# see: dh_installdeb(1)

# Load the debconf library - this must come FIRST; do not insert any other
# commands before this
. /usr/share/debconf/confmodule

DEBUG="debug"

#[ -n $DEBUG ] && set -x

##
## Some Postgresql stuff
##
db_get postgresql/initdb/location
PGDATA=${POSTGRES_DATA:=${RET:-/var/lib/postgres/data}}
PGBASE=/usr/lib/postgresql
PGLIB=${PGBASE}/lib
PATH=${PATH}:${PGBASE}/bin
export PGDATA PGLIB PATH
PGHOME=${POSTGRES_HOME:=`dirname ${PGDATA}`}
PGSHELL=`getent passwd postgres | awk -F: '{print $7}'`

if [ -z "${PGSHELL}" ]
then
    PGSHELL=/bin/sh
fi

PGSHELL=`basename ${PGSHELL}`
case ${PGSHELL} in

    bash)
	PROFILE=.bash_profile
	;;
    sh | ksh)
	PROFILE=.profile
	;;
    csh | tcsh)
	PROFILE=.login
	;;
    *)
	PROFILE=.profile
	;;
esac

##
## temporary files
##

SCRIPTFILE=`mktemp ${TMPDIR:=/tmp}/cere-script.XXXXXX` || exit 1
chown postgres.postgres $SCRIPTFILE
TMPFILE=`mktemp ${TMPDIR:=/tmp}/cere-tmp.XXXXXX` || exit 1
chown postgres.postgres $TMPFILE 
MAILFILE=`mktemp ${TMPDIR:=/tmp}/cere-mail.XXXXXX` || exit 1
chown postgres.postgres $MAILFILE
MAILSUBJECT="cerebrum-server installation"

# arrange to delete the temporary files and mail output to root
# when this script terminates
trap "[ -n $DEBUG ] && cat ${TMPFILE}; rm -f ${TMPFILE} ${SCRIPTFILE}; ([ -s $MAILFILE ] && mail -s '$MAILSUBJECT' root < ${MAILFILE}); rm -f $MAILFILE" 0


function prepare_db () {

    secret=`dd if=/dev/urandom count=20 bs=1 2>/dev/null | md5sum | cut -c1-32`
    
    cat <<EOI > $SCRIPTFILE
#!/bin/sh -e
cd ${PGHOME}
. ./${PROFILE}
#export PATH=/usr/lib/postgresql/bin:/bin:/usr/bin
if psql -l | grep -qs cerebrum ; then
    echo "Database exists" > $TMPFILE
    if echo "\dt \q" | psql cerebrum | grep -qs '^No relations found\.$' ; then
        echo "Database is not populated yet" >> $TMPFILE
    else
        echo "Database is populated" >> $TMPFILE 
    fi
else
    echo "Database did not exist yet" > $TMPFILE
    createdb -E unicode cerebrum >> $TMPFILE 2>&1
fi
if echo "\du cerebrum \q" | psql cerebrum | tail -n 2 | grep -qs '\(0 row\)' ; then
    echo "User did not exit yet" >> $TMPFILE
    echo "CREATE USER cerebrum WITH PASSWORD '$secret';" | psql cerebrum >> $TMPFILE 2>&1
elif [ ! -f "/etc/cerebrum/passwd-cerebrum@cerebrum" ] ; then
    echo "Password was lost or never set" >> $TMPFILE
    echo "ALTER USER cerebrum WITH PASSWORD '$secret';" | psql cerebrum >> $TMPFILE 2>&1
else
    echo "User exists" >> $TMPFILE 
fi
EOI
    if /sbin/start-stop-daemon --chuid postgres \
	--name `basename $SCRIPTFILE` --start \
	--startas /bin/sh -- $SCRIPTFILE 
	then
	# Success!
	[ -n $DEBUG ] && cat $TMPFILE
	if grep -qs ' USER' $TMPFILE ; then 
	    # this is the case with ALTER USER and CREATE USER
	    [ -n $DEBUG ] && echo "writing new database password"
	    printf "cerebrum\t$secret\n" > /etc/cerebrum/passwd-cerebrum@cerebrum
	fi
	if egrep -qs '(Database is not populated yet|Database did not exist yet)'  $TMPFILE ; then 
	    [ -n $DEBUG ] && echo "populating database"
	    rm -f $SCRIPTFILE $TMPFILE
	    cat <<EOI > $SCRIPTFILE
#!/bin/sh -e
# FIXME this stuff needs to go into a config file!
/usr/sbin/makedb.py \
	--extra-file=/usr/share/cerebrum/design/bofhd_auth.sql \
	--extra-file=/usr/share/cerebrum/design/mod_password_history.sql \
	--extra-file=/usr/share/cerebrum/design/mod_posix_user.sql \
	--extra-file=/usr/share/cerebrum/design/mod_changelog.sql \
	--extra-file=/usr/share/cerebrum/design/mod_stedkode.sql \
	--extra-file=/usr/share/cerebrum/design/mod_email.sql \
	--extra-file=/usr/share/cerebrum/design/bofhd_tables.sql \
	>> $TMPFILE 2>&1
EOI
	   # [ -n $DEBUG ] && cat $SCRIPTFILE
	    /sbin/start-stop-daemon --chuid cerebrum \
		--name `basename $SCRIPTFILE` --start \
		--startas /bin/sh -- $SCRIPTFILE 

	    [ -n $DEBUG ] && cat $TMPFILE
	fi
    fi
}



# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

case "$1" in
    configure)

	if [ -z $(getent passwd cerebrum) ]; then
	    adduser --home /nonexistent --system --no-create-home cerebrum
	fi
	chown -R cerebrum.root /var/log/cerebrum \
			       /etc/cerebrum/cereconf.py
	chmod 660 /etc/cerebrum/cereconf.py


	db_get cerebrum-server/db_auto_config
	db_auto_config=$RET
	if [ $db_auto_config ] ; then
	    db_get cerebrum-server/initial_accountname_password
	    initial_accountname_password=$RET
	    perl -p -i -e \
	      "s/^INITIAL_ACCOUNTNAME_PASSWORD\s*=\s.*/INITIAL_ACCOUNTNAME_PASSWORD = \"$initial_accountname_password\"/ " \
	      /etc/cerebrum/cereconf.py
	    prepare_db
	else 
	    echo "create your db yourself!"
	fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

echo "cerebrum-server postinstall calling debhelper scripts"

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#
