# -*- coding: iso-8859-1 -*-

# Copyright 2004, 2005 University of Oslo, Norway
#
# This file is part of Cerebrum.
#
# Cerebrum is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Cerebrum is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cerebrum; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

from Builder import Builder, Attribute
from DatabaseClass import DatabaseTransactionClass
from Date import Date

import Registry
registry = Registry.get_registry()

# FIXME: finne en bedre plass for Struct og/eller KeyValue?
class Struct:
    def __init__(self, data_type):
        self.data_type = data_type

class Any:
    pass

class KeyValue(Builder):
    slots = [
        Attribute('key', str),
        Attribute('value', str),
        Attribute('int_value', int),
        Attribute('float_value', float),
        Attribute('is_none', bool)
    ]

    method_slots = []

    def make(cls, key, value):
        int_value = -1
        float_value = -1.0
        if type(value) in (int, long, float):
            int_value = int(value)
        if type(value) in (int, long, float):
            float_value = float(value)
        date_value = None # FIXME: dato!

        return {
            'key':key,
            'value':str(value),
            'int_value':int_value,
            'float_value':float_value,
            'is_none':value is None
        }
    make = classmethod(make)


registry.register_class(KeyValue)

class DumpClass(Builder):
    """Base class for all dumperclasses.
    
    All generated dumperclasses, which are generated by dumpable, will
    inherit this class. This class makes sure that dumperobjects wont
    be cached.
    """
    
    primary = []
    slots = []
    method_slots = []

    def __init__(self, data, signature=None):
        super(DumpClass, self).__init__()

        self.structs = []

        if signature is None:
            signature = [i.name for i in self.cls.slots]

        mine = object()

        for obj in data:
            s = {}
            if type(obj) == list:
                for name, value in zip(signature, obj):
                    if value is None:
                        continue
                    if isinstance(value, Date):
                        value = str(value._value)
                    s[name] = value
            else:
                # FIXME: ubrukelig... vi må sørge for at det virkelig
                # ligger data i objektene...
                for name in signature:
                    value = getattr(obj, '_%s' % name, mine)
                    if value is not mine:
                        s[name] = value

            self.structs.append(s)

registry.register_class(DumpClass)

# arch-tag: 13564347-7aef-4465-8b83-c3d694bf6951
