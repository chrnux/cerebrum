################################################## 
# Serve_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class ServeInterface:
    def getServe(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class ServeLocator(ServeInterface):
    Serve_address = "https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve"
    def getServeAddress(self):
        return ServeLocator.Serve_address

    def getServe(self, portAddress=None, **kw):
        return ServeSoapBindingSOAP(portAddress or ServeLocator.Serve_address, **kw)


class ServeSoapBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def getVersion(self, request):
        """
        @param: request to getVersionRequest
        @return: response from getVersionResponse::
          _getVersionReturn: str
        """

        if not isinstance(request, getVersionRequest) and\
            not issubclass(getVersionRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(getVersionResponseWrapper())
        if not isinstance(response, getVersionResponse) and\
            not issubclass(getVersionResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def kjerneCheckId(self, request):
        """
        @param: request to kjerneCheckIdRequest::
          _birthDate: Any
          _pin: str
          _ssn: Any
          _studentId: Any

        @return: response from kjerneCheckIdResponse::
          _kjerneCheckIdReturn: str
        """

        if not isinstance(request, kjerneCheckIdRequest) and\
            not issubclass(kjerneCheckIdRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(kjerneCheckIdResponseWrapper())
        if not isinstance(response, kjerneCheckIdResponse) and\
            not issubclass(kjerneCheckIdResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class getVersionRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, getVersionRequest, [], pname=name, aname="_%s" % name, oname=oname )

class getVersionRequestWrapper(getVersionRequest):
    """wrapper for rpc:encoded message"""

    typecode = getVersionRequest(name='getVersion', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve')
    def __init__( self, name=None, ns=None, **kw ):
        getVersionRequest.__init__( self, name='getVersion', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve' )

class getVersionResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._getVersionReturn = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, getVersionResponse, [ZSI.TC.String(pname="getVersionReturn",aname="_getVersionReturn",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class getVersionResponseWrapper(getVersionResponse):
    """wrapper for rpc:encoded message"""

    typecode = getVersionResponse(name='getVersionResponse', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve')
    def __init__( self, name=None, ns=None, **kw ):
        getVersionResponse.__init__( self, name='getVersionResponse', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve' )

class kjerneCheckIdRequest (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._birthDate = None
        self._ssn = None
        self._studentId = None
        self._pin = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, kjerneCheckIdRequest, [ZSI.TC.Any(pname="birthDate",aname="_birthDate",optional=1),ZSI.TC.Any(pname="ssn",aname="_ssn",optional=1),ZSI.TC.Any(pname="studentId",aname="_studentId",optional=1),ZSI.TC.String(pname="pin",aname="_pin",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class kjerneCheckIdRequestWrapper(kjerneCheckIdRequest):
    """wrapper for rpc:encoded message"""

    typecode = kjerneCheckIdRequest(name='kjerneCheckId', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve')
    def __init__( self, name=None, ns=None, **kw ):
        kjerneCheckIdRequest.__init__( self, name='kjerneCheckId', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve' )

class kjerneCheckIdResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._kjerneCheckIdReturn = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, kjerneCheckIdResponse, [ZSI.TC.String(pname="kjerneCheckIdReturn",aname="_kjerneCheckIdReturn",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class kjerneCheckIdResponseWrapper(kjerneCheckIdResponse):
    """wrapper for rpc:encoded message"""

    typecode = kjerneCheckIdResponse(name='kjerneCheckIdResponse', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve')
    def __init__( self, name=None, ns=None, **kw ):
        kjerneCheckIdResponse.__init__( self, name='kjerneCheckIdResponse', ns='https://wotest.itea.ntnu.no:443/cgi-bin/WebObjects/WSIdm.woa/1/ws/Serve' )
