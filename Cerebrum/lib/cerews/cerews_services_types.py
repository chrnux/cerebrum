################################################## 
# cerews_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://bas.ntnu.no/spinews.wsdl
##############################

class ns0:
    targetNamespace = "http://bas.ntnu.no/spinews.wsdl"

    class GroupType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "GroupType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GroupType_Def.schema
            TClist = [ZSI.TC.String(pname="member", aname="_member", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="quarantine", aname="_quarantine", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
                self.attribute_typecode_dict["posix_gid"] = ZSI.TCnumbers.Iinteger()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._member = []
                    self._quarantine = []
                    return
            Holder.__name__ = "GroupType_Holder"
            self.pyclass = Holder

    class AccountType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "AccountType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AccountType_Def.schema
            TClist = [ZSI.TC.String(pname="quarantine", aname="_quarantine", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://bas.ntnu.no/spinews.wsdl","AffiliationType",lazy=False)(pname="affiliation", aname="_affiliation", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
                self.attribute_typecode_dict["passwd"] = ZSI.TC.String()
                self.attribute_typecode_dict["homedir"] = ZSI.TC.String()
                self.attribute_typecode_dict["home"] = ZSI.TC.String()
                self.attribute_typecode_dict["disk_path"] = ZSI.TC.String()
                self.attribute_typecode_dict["disk_host"] = ZSI.TC.String()
                self.attribute_typecode_dict["gecos"] = ZSI.TC.String()
                self.attribute_typecode_dict["full_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["shell"] = ZSI.TC.String()
                self.attribute_typecode_dict["shell_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["posix_uid"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["posix_gid"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["primary_group"] = ZSI.TC.String()
                self.attribute_typecode_dict["owner_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["owner_group_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_affiliation"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_ou_id"] = ZSI.TCnumbers.Iinteger()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._quarantine = []
                    self._affiliation = []
                    return
            Holder.__name__ = "AccountType_Holder"
            self.pyclass = Holder

    class AffiliationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "AffiliationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AffiliationType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["affiliation"] = ZSI.TC.String()
                self.attribute_typecode_dict["ou_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["status"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "AffiliationType_Holder"
            self.pyclass = Holder

    class PersonType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "PersonType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PersonType_Def.schema
            TClist = [ZSI.TC.String(pname="quarantine", aname="_quarantine", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://bas.ntnu.no/spinews.wsdl","AffiliationType",lazy=False)(pname="affiliation", aname="_affiliation", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="trait", aname="_trait", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["export_id"] = ZSI.TC.String()
                self.attribute_typecode_dict["type"] = ZSI.TC.String()
                self.attribute_typecode_dict["birth_date"] = ZSI.TC.String()
                self.attribute_typecode_dict["nin"] = ZSI.TC.String()
                self.attribute_typecode_dict["first_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["last_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["full_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["display_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["work_title"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_account"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["primary_account_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_account_password"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_affiliation"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_affiliation_status"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_ou_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["email"] = ZSI.TC.String()
                self.attribute_typecode_dict["address_text"] = ZSI.TC.String()
                self.attribute_typecode_dict["city"] = ZSI.TC.String()
                self.attribute_typecode_dict["postal_number"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["phone"] = ZSI.TC.String()
                self.attribute_typecode_dict["url"] = ZSI.TC.String()
                self.attribute_typecode_dict["keycardid0"] = ZSI.TC.String()
                self.attribute_typecode_dict["keycardid1"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._quarantine = []
                    self._affiliation = []
                    self._trait = []
                    return
            Holder.__name__ = "PersonType_Holder"
            self.pyclass = Holder

    class OUType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "OUType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OUType_Def.schema
            TClist = [ZSI.TC.String(pname="quarantine", aname="_quarantine", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
                self.attribute_typecode_dict["acronym"] = ZSI.TC.String()
                self.attribute_typecode_dict["short_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["display_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["sort_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["parent_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["email"] = ZSI.TC.String()
                self.attribute_typecode_dict["url"] = ZSI.TC.String()
                self.attribute_typecode_dict["phone"] = ZSI.TC.String()
                self.attribute_typecode_dict["post_address"] = ZSI.TC.String()
                self.attribute_typecode_dict["stedkode"] = ZSI.TC.String()
                self.attribute_typecode_dict["parent_stedkode"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._quarantine = []
                    return
            Holder.__name__ = "OUType_Holder"
            self.pyclass = Holder

    class AliasType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "AliasType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AliasType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["local_part"] = ZSI.TC.String()
                self.attribute_typecode_dict["domain"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_address_local_part"] = ZSI.TC.String()
                self.attribute_typecode_dict["primary_address_domain"] = ZSI.TC.String()
                self.attribute_typecode_dict["address_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["primary_address_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["server_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["account_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["account_name"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "AliasType_Holder"
            self.pyclass = Holder

    class HomedirType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://bas.ntnu.no/spinews.wsdl"
        type = (schema, "HomedirType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.HomedirType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["homedir_id"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["disk_path"] = ZSI.TC.String()
                self.attribute_typecode_dict["home"] = ZSI.TC.String()
                self.attribute_typecode_dict["homedir"] = ZSI.TC.String()
                self.attribute_typecode_dict["account_name"] = ZSI.TC.String()
                self.attribute_typecode_dict["posix_uid"] = ZSI.TCnumbers.Iinteger()
                self.attribute_typecode_dict["posix_gid"] = ZSI.TCnumbers.Iinteger()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "HomedirType_Holder"
            self.pyclass = Holder

    class getAccountsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountsResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getAccountsResponse_Dec.schema
            TClist = [GTD("http://bas.ntnu.no/spinews.wsdl","AccountType",lazy=False)(pname="account", aname="_account", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getAccountsResponse")
            kw["aname"] = "_getAccountsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._account = []
                    return
            Holder.__name__ = "getAccountsResponse_Holder"
            self.pyclass = Holder

    class getPersonsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPersonsResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getPersonsResponse_Dec.schema
            TClist = [GTD("http://bas.ntnu.no/spinews.wsdl","PersonType",lazy=False)(pname="person", aname="_person", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getPersonsResponse")
            kw["aname"] = "_getPersonsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._person = []
                    return
            Holder.__name__ = "getPersonsResponse_Holder"
            self.pyclass = Holder

    class getGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGroupsResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getGroupsResponse_Dec.schema
            TClist = [GTD("http://bas.ntnu.no/spinews.wsdl","GroupType",lazy=False)(pname="group", aname="_group", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getGroupsResponse")
            kw["aname"] = "_getGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._group = []
                    return
            Holder.__name__ = "getGroupsResponse_Holder"
            self.pyclass = Holder

    class getOUsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOUsResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getOUsResponse_Dec.schema
            TClist = [GTD("http://bas.ntnu.no/spinews.wsdl","OUType",lazy=False)(pname="ou", aname="_ou", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getOUsResponse")
            kw["aname"] = "_getOUsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ou = []
                    return
            Holder.__name__ = "getOUsResponse_Holder"
            self.pyclass = Holder

    class getAliasesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAliasesResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getAliasesResponse_Dec.schema
            TClist = [GTD("http://bas.ntnu.no/spinews.wsdl","AliasType",lazy=False)(pname="alias", aname="_alias", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getAliasesResponse")
            kw["aname"] = "_getAliasesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._alias = []
                    return
            Holder.__name__ = "getAliasesResponse_Holder"
            self.pyclass = Holder

    class getHomedirsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHomedirsResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getHomedirsResponse_Dec.schema
            TClist = [GTD("http://bas.ntnu.no/spinews.wsdl","HomedirType",lazy=False)(pname="homedir", aname="_homedir", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getHomedirsResponse")
            kw["aname"] = "_getHomedirsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._homedir = []
                    return
            Holder.__name__ = "getHomedirsResponse_Holder"
            self.pyclass = Holder

    class setHomedirStatusResponse_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "setHomedirStatusResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","setHomedirStatusResponse")
            kw["aname"] = "_setHomedirStatusResponse"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_setHomedirStatusResponse_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class getChangelogidRequest_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "getChangelogidRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getChangelogidRequest")
            kw["aname"] = "_getChangelogidRequest"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_getChangelogidRequest_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class getChangelogidResponse_Dec(ZSI.TCnumbers.Iinteger, ElementDeclaration):
        literal = "getChangelogidResponse"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getChangelogidResponse")
            kw["aname"] = "_getChangelogidResponse"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_getChangelogidResponse_immutable_holder"
            ZSI.TCnumbers.Iinteger.__init__(self, **kw)

    class getGroupsRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGroupsRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getGroupsRequest_Dec.schema
            TClist = [ZSI.TC.String(pname="groupspread", aname="_groupspread", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accountspread", aname="_accountspread", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="incremental_from", aname="_incremental_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getGroupsRequest")
            kw["aname"] = "_getGroupsRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupspread = None
                    self._accountspread = None
                    self._incremental_from = None
                    return
            Holder.__name__ = "getGroupsRequest_Holder"
            self.pyclass = Holder

    class getAccountsRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAccountsRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getAccountsRequest_Dec.schema
            TClist = [ZSI.TC.String(pname="accountspread", aname="_accountspread", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="auth_type", aname="_auth_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="incremental_from", aname="_incremental_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="include_affiliations", aname="_include_affiliations", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getAccountsRequest")
            kw["aname"] = "_getAccountsRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accountspread = None
                    self._auth_type = None
                    self._incremental_from = None
                    self._include_affiliations = None
                    return
            Holder.__name__ = "getAccountsRequest_Holder"
            self.pyclass = Holder

    class getPersonsRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPersonsRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getPersonsRequest_Dec.schema
            TClist = [ZSI.TC.String(pname="personspread", aname="_personspread", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accountspread", aname="_accountspread", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname="incremental_from", aname="_incremental_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getPersonsRequest")
            kw["aname"] = "_getPersonsRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._personspread = None
                    self._accountspread = None
                    self._incremental_from = None
                    return
            Holder.__name__ = "getPersonsRequest_Holder"
            self.pyclass = Holder

    class getOUsRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOUsRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getOUsRequest_Dec.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname="incremental_from", aname="_incremental_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getOUsRequest")
            kw["aname"] = "_getOUsRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._incremental_from = None
                    return
            Holder.__name__ = "getOUsRequest_Holder"
            self.pyclass = Holder

    class getAliasesRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAliasesRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getAliasesRequest_Dec.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname="incremental_from", aname="_incremental_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailserver", aname="_emailserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getAliasesRequest")
            kw["aname"] = "_getAliasesRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._incremental_from = None
                    self._emailserver = None
                    return
            Holder.__name__ = "getAliasesRequest_Holder"
            self.pyclass = Holder

    class getHomedirsRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getHomedirsRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.getHomedirsRequest_Dec.schema
            TClist = [ZSI.TC.String(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","getHomedirsRequest")
            kw["aname"] = "_getHomedirsRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._hostname = None
                    return
            Holder.__name__ = "getHomedirsRequest_Holder"
            self.pyclass = Holder

    class setHomedirStatusRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setHomedirStatusRequest"
        schema = "http://bas.ntnu.no/spinews.wsdl"
        def __init__(self, **kw):
            ns = ns0.setHomedirStatusRequest_Dec.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname="homedir_id", aname="_homedir_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://bas.ntnu.no/spinews.wsdl","setHomedirStatusRequest")
            kw["aname"] = "_setHomedirStatusRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._homedir_id = None
                    self._status = None
                    return
            Holder.__name__ = "setHomedirStatusRequest_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://bas.ntnu.no/spinews.wsdl)
